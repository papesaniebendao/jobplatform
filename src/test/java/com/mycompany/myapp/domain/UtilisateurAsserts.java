package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UtilisateurAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurAllPropertiesEquals(Utilisateur expected, Utilisateur actual) {
        assertUtilisateurAutoGeneratedPropertiesEquals(expected, actual);
        assertUtilisateurAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurAllUpdatablePropertiesEquals(Utilisateur expected, Utilisateur actual) {
        assertUtilisateurUpdatableFieldsEquals(expected, actual);
        assertUtilisateurUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurAutoGeneratedPropertiesEquals(Utilisateur expected, Utilisateur actual) {
        assertThat(actual)
            .as("Verify Utilisateur auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurUpdatableFieldsEquals(Utilisateur expected, Utilisateur actual) {
        assertThat(actual)
            .as("Verify Utilisateur relevant properties")
            .satisfies(a -> assertThat(a.getNom()).as("check nom").isEqualTo(expected.getNom()))
            .satisfies(a -> assertThat(a.getTelephone()).as("check telephone").isEqualTo(expected.getTelephone()))
            .satisfies(a -> assertThat(a.getRole()).as("check role").isEqualTo(expected.getRole()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurUpdatableRelationshipsEquals(Utilisateur expected, Utilisateur actual) {
        assertThat(actual)
            .as("Verify Utilisateur relationships")
            .satisfies(a -> assertThat(a.getCv()).as("check cv").isEqualTo(expected.getCv()));
    }
}
